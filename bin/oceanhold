#!/usr/bin/env node

require('babel/register');

var path = require('path');

var blessed = require('blessed');

var args = require('yargs')
            .help('help').alias('help', 'h')
            .usage('Usage: $0')
            .argv;

var getProcesses = require(path.resolve(__dirname, "../lib/processes"));
var Process = require(path.resolve(__dirname, "../lib/process"));

var processes = {};

var screen = blessed.screen({
  autoPadding: true,
  smartCSR: true
});

screen.title = 'oceanhold';

var table = blessed.listtable({
  parent: screen,
  top: 'center',
  left: '0',
  border: 'line',
  align: 'left',
  tags: true,
  keys: true,
  width: '20%',
  height: '100%',
  vi: true,
  mouse: true,
  style: {
    border: {
      fg: 'gray'
    },
    header: {
      fg: 'gray',
      bold: true
    },
    cell: {
      selected: {
        bg: 'blue'
      }
    }
  }
});

var parentBox = blessed.box({
  parent: screen,
  top: 'center',
  left: '0',
  border: 'line',
  align: 'right',
  width: '100%',
  height: '100%'
});

var nameBox = blessed.box({
  parent: parentBox,
  left: '0',
  align: 'center',
  width: 'shrink',
  height: 'shrink',
  content: '...'
});

var actionBar = blessed.listbar({
  parent: parentBox,
  align: 'left',
  width: "100%",
  height: "10%",
  border: 'line',
  bottom: 0,
  style: {
    bg: 'green',
    item: {
      bg: 'red',
      hover: {
        bg: 'blue'
      },
      focus: {
       bg: 'blue'
      }
    },
    selected: {
      bg: 'blue'
    }
  },
  commands: {
    'action': function() {
      console.log('lol action');
      screen.render();
    }
  }
})

nameBox.hide();
actionBar.hide();

screen.append(parentBox);

var processList = [];

function refreshProcessList() {

  getProcesses(function(e, processListData) {

    processList = processListData;

    processListData = processListData.map(function(entry) {
      if(!entry.PID || !entry.COMMAND) return false;
      var command = path.basename(entry.COMMAND.toString());
      if(command.length > 20) {
        command = command.substr(0, 20) + "...";
      }
      return [ entry.PID.toString(), command ];
    }).filter(Boolean);

    processListData = processListData.sort(function(a, b) {
      return parseInt(a[0]) - parseInt(b[0]);
    });

    processListData.unshift([ "pid", "command" ]);

    table.setData(processListData);

    screen.render();

  });

}

refreshProcessList();

screen.append(table);

table.focus();

table.on('select', function(selected) {
  selectProcess(selected);
});

screen.key(['C-c'], function(ch, key) {
  return process.exit(0);
});

screen.key([ 'r' ], function(ch, key) {
  refreshProcessList();
});

screen.render();

function selectProcess(el) {

  // hacks until i figure out a better way
  var data = el.content.split(/\s+/);

  screen.title = "oceanhold - " + data[0];

  getProcesses(function(e, processList) {

    for(var i = 0; i < processList.length; i++) {
      if(processList[i].PID == data[0]) {
        p = processList[i];
      }
    }

    if(!p) {
      // process has probably died
      throw new Error("invalid process");
    }

    var process = new Process(p);

    process.inject(function(err) {

      if(err) {
        console.error("Error injecting process:", err);
        return process.exit(1);
      }

      var shortName = p.COMMAND.length > 20 ? p.COMMAND.substr(0, 20) + "..." : p.COMMAND;

      nameBox.content = p.PID + " - " + shortName;
      nameBox.show();

      actionBar.show();

      actionBar.focus();

      screen.render();

    });   

  });

}